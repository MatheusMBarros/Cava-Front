{
  "version": 3,
  "sources": ["../../csv-writer/src/lib/csv-stringifiers/abstract.ts", "../../csv-writer/src/lib/csv-stringifiers/array.ts", "../../csv-writer/src/lib/field-stringifier.ts", "../../csv-writer/src/lib/lang/object.ts", "../../csv-writer/src/lib/csv-stringifiers/object.ts", "../../csv-writer/src/lib/csv-stringifier-factory.ts", "../../csv-writer/src/lib/lang/promise.ts", "browser-external:fs", "../../csv-writer/src/lib/file-writer.ts", "../../csv-writer/src/lib/csv-writer.ts", "../../csv-writer/src/lib/csv-writer-factory.ts", "../../csv-writer/src/index.ts"],
  "sourcesContent": ["import {FieldStringifier} from '../field-stringifier';\nimport {Field} from '../record';\n\nconst DEFAULT_RECORD_DELIMITER = '\\n';\nconst VALID_RECORD_DELIMITERS = [DEFAULT_RECORD_DELIMITER, '\\r\\n'];\n\nexport abstract class CsvStringifier<T> {\n\n    constructor(private readonly fieldStringifier: FieldStringifier,\n                private readonly recordDelimiter = DEFAULT_RECORD_DELIMITER) {\n        _validateRecordDelimiter(recordDelimiter);\n    }\n\n    getHeaderString(): string | null {\n        const headerRecord = this.getHeaderRecord();\n        return headerRecord ? this.joinRecords([this.getCsvLine(headerRecord)]) : null;\n    }\n\n    stringifyRecords(records: IterableIterator<T> | T[]): string {\n        const csvLines = Array.from(records, record => this.getCsvLine(this.getRecordAsArray(record)));\n        return this.joinRecords(csvLines);\n    }\n\n    protected abstract getRecordAsArray(_record: T): Field[];\n\n    protected abstract getHeaderRecord(): string[] | null | undefined;\n\n    private getCsvLine(record: Field[]): string {\n        return record\n            .map(fieldValue => this.fieldStringifier.stringify(fieldValue))\n            .join(this.fieldStringifier.fieldDelimiter);\n    }\n\n    private joinRecords(records: string[]) {\n        return records.join(this.recordDelimiter) + this.recordDelimiter;\n    }\n}\n\nfunction _validateRecordDelimiter(delimiter: string): void {\n    if (VALID_RECORD_DELIMITERS.indexOf(delimiter) === -1) {\n        throw new Error(`Invalid record delimiter \\`${delimiter}\\` is specified`);\n    }\n}\n", "import {CsvStringifier} from './abstract';\nimport {FieldStringifier} from '../field-stringifier';\nimport {Field} from '../record';\n\nexport class ArrayCsvStringifier extends CsvStringifier<Field[]> {\n\n    constructor(fieldStringifier: FieldStringifier,\n                recordDelimiter?: string,\n                private readonly header?: string[]) {\n        super(fieldStringifier, recordDelimiter);\n    }\n\n    protected getHeaderRecord() {\n        return this.header;\n    }\n\n    protected getRecordAsArray(record: Field[]): Field[] {\n        return record;\n    }\n}\n", "import {Field} from './record';\n\nconst DEFAULT_FIELD_DELIMITER = ',';\nconst VALID_FIELD_DELIMITERS = [DEFAULT_FIELD_DELIMITER, ';'];\n\nexport abstract class FieldStringifier {\n    constructor(public readonly fieldDelimiter: string) {}\n\n    abstract stringify(value?: Field): string;\n\n    protected isEmpty(value?: Field): boolean {\n        return typeof value === 'undefined' || value === null || value === '';\n    }\n\n    protected quoteField(field: string): string {\n        return `\"${field.replace(/\"/g, '\"\"')}\"`;\n    }\n}\n\nclass DefaultFieldStringifier extends FieldStringifier {\n    stringify(value?: Field): string {\n        if (this.isEmpty(value)) return '';\n        const str = String(value);\n        return this.needsQuote(str) ? this.quoteField(str) : str;\n    }\n\n    private needsQuote(str: string): boolean {\n        return str.includes(this.fieldDelimiter) || str.includes('\\n') || str.includes('\"');\n    }\n}\n\nclass ForceQuoteFieldStringifier extends FieldStringifier {\n    stringify(value?: Field): string {\n        return this.isEmpty(value) ? '' : this.quoteField(String(value));\n    }\n}\n\nexport function createFieldStringifier(fieldDelimiter: string = DEFAULT_FIELD_DELIMITER, alwaysQuote = false) {\n    _validateFieldDelimiter(fieldDelimiter);\n    return alwaysQuote ? new ForceQuoteFieldStringifier(fieldDelimiter) : new DefaultFieldStringifier(fieldDelimiter);\n}\n\nfunction _validateFieldDelimiter(delimiter: string): void {\n    if (VALID_FIELD_DELIMITERS.indexOf(delimiter) === -1) {\n        throw new Error(`Invalid field delimiter \\`${delimiter}\\` is specified`);\n    }\n}\n", "export const isObject = (value: any) =>\n    Object.prototype.toString.call(value) === '[object Object]';\n\nexport interface ObjectMap<T> {\n    [k: string]: T;\n}\n", "import {CsvStringifier} from './abstract';\nimport {FieldStringifier} from '../field-stringifier';\nimport {Field, ObjectHeaderItem, ObjectStringifierHeader} from '../record';\nimport {isObject, ObjectMap} from '../lang/object';\n\nexport class ObjectCsvStringifier extends CsvStringifier<ObjectMap<Field>> {\n\n    constructor(fieldStringifier: FieldStringifier,\n                private readonly header: ObjectStringifierHeader,\n                recordDelimiter?: string,\n                private readonly headerIdDelimiter?: string) {\n        super(fieldStringifier, recordDelimiter);\n    }\n\n    protected getHeaderRecord(): string[] | null {\n        if (!this.isObjectHeader) return null;\n        return (this.header as ObjectHeaderItem[]).map(field => field.title);\n    }\n\n    protected getRecordAsArray(record: ObjectMap<Field>): Field[] {\n        return this.fieldIds.map(fieldId => this.getNestedValue(record, fieldId));\n    }\n\n    private getNestedValue(obj: ObjectMap<Field>, key: string) {\n        if (!this.headerIdDelimiter) return obj[key];\n        return key.split(this.headerIdDelimiter).reduce((subObj, keyPart) => (subObj || {})[keyPart], obj);\n    }\n\n    private get fieldIds(): string[] {\n        return this.isObjectHeader ? (this.header as ObjectHeaderItem[]).map(column => column.id) : (this.header as string[]);\n    }\n\n    private get isObjectHeader(): boolean {\n        return isObject(this.header && this.header[0]);\n    }\n}\n", "import {ArrayCsvStringifier} from './csv-stringifiers/array';\nimport {createFieldStringifier} from './field-stringifier';\nimport {ObjectCsvStringifier} from './csv-stringifiers/object';\nimport {ObjectStringifierHeader} from './record';\n\nexport interface ArrayCsvStringifierParams {\n    header?: string[];\n    fieldDelimiter?: string;\n    recordDelimiter?: string;\n    alwaysQuote?: boolean;\n}\n\nexport interface ObjectCsvStringifierParams {\n    header: ObjectStringifierHeader;\n    fieldDelimiter?: string;\n    recordDelimiter?: string;\n    headerIdDelimiter?: string;\n    alwaysQuote?: boolean;\n}\n\nexport class CsvStringifierFactory {\n\n    createArrayCsvStringifier(params: ArrayCsvStringifierParams) {\n        const fieldStringifier = createFieldStringifier(params.fieldDelimiter, params.alwaysQuote);\n        return new ArrayCsvStringifier(fieldStringifier, params.recordDelimiter, params.header);\n    }\n\n    createObjectCsvStringifier(params: ObjectCsvStringifierParams) {\n        const fieldStringifier = createFieldStringifier(params.fieldDelimiter, params.alwaysQuote);\n        return new ObjectCsvStringifier(fieldStringifier, params.header, params.recordDelimiter, params.headerIdDelimiter);\n    }\n\n}\n", "\ntype NullableError = Error | null;\n\nexport function promisify(fn: (...args: any[]) => void): (...args: any[]) => any {\n    return (...args: any[]) => {\n        return new Promise((resolve, reject) => {\n            const nodeCallback = (err: NullableError, result: any) => {\n                if (err) reject(err);\n                else resolve(result);\n            };\n            fn.apply(null, [...args, nodeCallback]);\n        });\n    };\n}\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import {promisify} from './lang/promise';\nimport {writeFile} from 'fs';\n\nconst writeFilePromise = promisify(writeFile);\n\nconst DEFAULT_ENCODING = 'utf8';\n\nexport class FileWriter {\n\n    constructor(private readonly path: string,\n                private append: boolean,\n                private readonly encoding = DEFAULT_ENCODING) {\n    }\n\n    async write(string: string): Promise<void> {\n        await writeFilePromise(this.path, string, this.getWriteOption());\n        this.append = true;\n    }\n\n    private getWriteOption() {\n        return {\n            encoding: this.encoding,\n            flag: this.append ? 'a' : 'w'\n        };\n    }\n}\n", "import {CsvStringifier} from './csv-stringifiers/abstract';\nimport {FileWriter} from './file-writer';\n\nconst DEFAULT_INITIAL_APPEND_FLAG = false;\n\nexport class CsvWriter<T> {\n    private readonly fileWriter: FileWriter;\n\n    constructor(private readonly csvStringifier: CsvStringifier<T>,\n                path: string,\n                encoding?: string,\n                private append = DEFAULT_INITIAL_APPEND_FLAG) {\n        this.fileWriter = new FileWriter(path, this.append, encoding);\n    }\n\n    async writeRecords(records: T[]): Promise<void> {\n        const recordsString = this.csvStringifier.stringifyRecords(records);\n        const writeString = this.headerString + recordsString;\n        await this.fileWriter.write(writeString);\n        this.append = true;\n    }\n\n    private get headerString(): string {\n        const headerString = !this.append && this.csvStringifier.getHeaderString();\n        return headerString || '';\n    }\n}\n", "import {CsvWriter} from './csv-writer';\nimport {CsvStringifierFactory} from './csv-stringifier-factory';\nimport {ObjectStringifierHeader} from './record';\n\nexport interface ArrayCsvWriterParams {\n    path: string;\n    header?: string[];\n    fieldDelimiter?: string;\n    recordDelimiter?: string;\n    alwaysQuote?: boolean;\n    encoding?: string;\n    append?: boolean;\n}\n\nexport interface ObjectCsvWriterParams {\n    path: string;\n    header: ObjectStringifierHeader;\n    fieldDelimiter?: string;\n    recordDelimiter?: string;\n    headerIdDelimiter?: string;\n    alwaysQuote?: boolean;\n    encoding?: string;\n    append?: boolean;\n}\n\nexport class CsvWriterFactory {\n    constructor(private readonly csvStringifierFactory: CsvStringifierFactory) {}\n\n    createArrayCsvWriter(params: ArrayCsvWriterParams) {\n        const csvStringifier = this.csvStringifierFactory.createArrayCsvStringifier({\n            header: params.header,\n            fieldDelimiter: params.fieldDelimiter,\n            recordDelimiter: params.recordDelimiter,\n            alwaysQuote: params.alwaysQuote\n        });\n        return new CsvWriter(csvStringifier, params.path, params.encoding, params.append);\n    }\n\n    createObjectCsvWriter(params: ObjectCsvWriterParams) {\n        const csvStringifier = this.csvStringifierFactory.createObjectCsvStringifier({\n            header: params.header,\n            fieldDelimiter: params.fieldDelimiter,\n            recordDelimiter: params.recordDelimiter,\n            headerIdDelimiter: params.headerIdDelimiter,\n            alwaysQuote: params.alwaysQuote\n        });\n        return new CsvWriter(csvStringifier, params.path, params.encoding, params.append);\n    }\n}\n", "import {\n    ArrayCsvStringifierParams,\n    CsvStringifierFactory,\n    ObjectCsvStringifierParams\n} from './lib/csv-stringifier-factory';\nimport {ArrayCsvWriterParams, CsvWriterFactory, ObjectCsvWriterParams} from './lib/csv-writer-factory';\n\nconst csvStringifierFactory = new CsvStringifierFactory();\nconst csvWriterFactory = new CsvWriterFactory(csvStringifierFactory);\n\nexport const createArrayCsvStringifier = (params: ArrayCsvStringifierParams) =>\n        csvStringifierFactory.createArrayCsvStringifier(params);\n\nexport const createObjectCsvStringifier = (params: ObjectCsvStringifierParams) =>\n        csvStringifierFactory.createObjectCsvStringifier(params);\n\nexport const createArrayCsvWriter = (params: ArrayCsvWriterParams) =>\n        csvWriterFactory.createArrayCsvWriter(params);\n\nexport const createObjectCsvWriter = (params: ObjectCsvWriterParams) =>\n        csvWriterFactory.createObjectCsvWriter(params);\n"],
  "mappings": "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",
  "names": ["CsvStringifier", "ArrayCsvStringifier", "FieldStringifier", "DefaultFieldStringifier", "ForceQuoteFieldStringifier", "ObjectCsvStringifier", "CsvStringifierFactory", "FileWriter", "CsvWriter", "CsvWriterFactory"]
}
